const mongoose = require('mongoose');
require('dotenv').config();

// Importar modelos
const Community = require('../models/Community');

// Funci√≥n para migrar comunidades existentes
async function migrateCommunitiesToStripeConnect() {
  try {
    console.log('üöÄ Iniciando migraci√≥n de comunidades a Stripe Connect...');
    
    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');
    
    // Obtener todas las comunidades
    const communities = await Community.find({});
    console.log(`üìä Encontradas ${communities.length} comunidades para migrar`);
    
    let updatedCount = 0;
    let skippedCount = 0;
    
    for (const community of communities) {
      try {
        // Verificar si ya tiene los campos de Stripe Connect
        if (community.stripeConnectAccountId !== undefined) {
          console.log(`‚è≠Ô∏è  Comunidad "${community.name}" ya migrada, saltando...`);
          skippedCount++;
          continue;
        }
        
        // Agregar campos de Stripe Connect con valores por defecto
        community.stripeConnectAccountId = '';
        community.stripeConnectStatus = 'pending';
        community.platformFeePercentage = 12;
        community.creatorFeePercentage = 88;
        
        await community.save();
        
        console.log(`‚úÖ Comunidad "${community.name}" migrada exitosamente`);
        updatedCount++;
        
      } catch (error) {
        console.error(`‚ùå Error migrando comunidad "${community.name}":`, error.message);
      }
    }
    
    console.log('\nüìã Resumen de migraci√≥n:');
    console.log(`   ‚úÖ Comunidades actualizadas: ${updatedCount}`);
    console.log(`   ‚è≠Ô∏è  Comunidades ya migradas: ${skippedCount}`);
    console.log(`   üìä Total procesadas: ${updatedCount + skippedCount}`);
    
    if (updatedCount > 0) {
      console.log('\nüéâ Migraci√≥n completada exitosamente!');
      console.log('üí° Las comunidades ahora est√°n listas para configurar Stripe Connect');
    } else {
      console.log('\n‚ÑπÔ∏è  No se requirieron actualizaciones');
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
  } finally {
    // Cerrar conexi√≥n
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a MongoDB cerrada');
    process.exit(0);
  }
}

// Funci√≥n para verificar el estado de la migraci√≥n
async function checkMigrationStatus() {
  try {
    console.log('üîç Verificando estado de migraci√≥n...');
    
    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');
    
    // Contar comunidades con y sin Stripe Connect
    const totalCommunities = await Community.countDocuments({});
    const migratedCommunities = await Community.countDocuments({
      stripeConnectAccountId: { $exists: true }
    });
    const pendingCommunities = await Community.countDocuments({
      stripeConnectAccountId: { $exists: true, $ne: '' }
    });
    
    console.log('\nüìä Estado de la migraci√≥n:');
    console.log(`   üìà Total de comunidades: ${totalCommunities}`);
    console.log(`   ‚úÖ Comunidades migradas: ${migratedCommunities}`);
    console.log(`   üèóÔ∏è  Comunidades con Stripe Connect configurado: ${pendingCommunities}`);
    console.log(`   ‚è≥ Comunidades pendientes de configuraci√≥n: ${migratedCommunities - pendingCommunities}`);
    
    // Mostrar algunas comunidades como ejemplo
    const sampleCommunities = await Community.find({})
      .select('name stripeConnectAccountId stripeConnectStatus platformFeePercentage')
      .limit(5);
    
    console.log('\nüìã Ejemplos de comunidades:');
    sampleCommunities.forEach(community => {
      console.log(`   üèòÔ∏è  ${community.name}:`);
      console.log(`      - Stripe Connect ID: ${community.stripeConnectAccountId || 'No configurado'}`);
      console.log(`      - Estado: ${community.stripeConnectStatus || 'N/A'}`);
      console.log(`      - Comisi√≥n plataforma: ${community.platformFeePercentage || 'N/A'}%`);
    });
    
  } catch (error) {
    console.error('‚ùå Error verificando estado:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a MongoDB cerrada');
    process.exit(0);
  }
}

// Funci√≥n para limpiar campos de Stripe Connect (solo para desarrollo)
async function resetStripeConnectFields() {
  try {
    console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n resetear√° todos los campos de Stripe Connect');
    console.log('üîí Solo usar en desarrollo/testing');
    
    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');
    
    // Resetear campos de Stripe Connect
    const result = await Community.updateMany(
      {},
      {
        $unset: {
          stripeConnectAccountId: "",
          stripeConnectStatus: "",
          platformFeePercentage: "",
          creatorFeePercentage: ""
        }
      }
    );
    
    console.log(`‚úÖ Reset completado. ${result.modifiedCount} comunidades afectadas`);
    
  } catch (error) {
    console.error('‚ùå Error durante el reset:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a MongoDB cerrada');
    process.exit(0);
  }
}

// Manejar argumentos de l√≠nea de comandos
const command = process.argv[2];

switch (command) {
  case 'migrate':
    migrateCommunitiesToStripeConnect();
    break;
  case 'check':
    checkMigrationStatus();
    break;
  case 'reset':
    resetStripeConnectFields();
    break;
  default:
    console.log('üìñ Uso del script de migraci√≥n:');
    console.log('   npm run migrate:stripe-connect    # Migrar comunidades');
    console.log('   npm run check:migration          # Verificar estado');
    console.log('   npm run reset:stripe-connect     # Resetear campos (solo dev)');
    console.log('\nüí° O ejecutar directamente:');
    console.log('   node scripts/migrateStripeConnect.js migrate');
    console.log('   node scripts/migrateStripeConnect.js check');
    console.log('   node scripts/migrateStripeConnect.js reset');
    process.exit(0);
}
