const mongoose = require('mongoose');

console.log('üîç Verificando configuraci√≥n de MongoDB...\n');

// Mostrar la URL de conexi√≥n (sin credenciales)
const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/hoodfy';
const displayUri = mongoUri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@');
console.log(`üì° URL de conexi√≥n: ${displayUri}`);

// Conectar a MongoDB
mongoose.connect(mongoUri, {
  serverSelectionTimeoutMS: 30000, // 30 segundos
  socketTimeoutMS: 45000, // 45 segundos
  bufferMaxEntries: 0,
  bufferCommands: false,
});

async function checkMongoDB() {
  try {
    console.log('\n‚è≥ Intentando conectar...');
    
    // Esperar a que la conexi√≥n est√© lista
    await mongoose.connection.asPromise();
    console.log('‚úÖ Conectado a MongoDB exitosamente\n');
    
    // Mostrar informaci√≥n de la conexi√≥n
    console.log('üìä INFORMACI√ìN DE LA CONEXI√ìN:');
    console.log(`   Host: ${mongoose.connection.host}`);
    console.log(`   Puerto: ${mongoose.connection.port}`);
    console.log(`   Base de datos: ${mongoose.connection.name}`);
    console.log(`   Estado: ${mongoose.connection.readyState === 1 ? 'Conectado' : 'Desconectado'}`);
    
    // Probar una consulta simple
    console.log('\nüîç Probando consulta simple...');
    const Community = require('../models/Community');
    const count = await Community.countDocuments();
    console.log(`‚úÖ Consulta exitosa. Total de comunidades: ${count}`);
    
    // Probar una consulta con filtro
    console.log('\nüîç Probando consulta con filtro...');
    const activeCount = await Community.countDocuments({ status: { $ne: 'deleted' } });
    console.log(`‚úÖ Consulta con filtro exitosa. Comunidades activas: ${activeCount}`);
    
    console.log('\nüéâ MongoDB est√° funcionando correctamente');
    
  } catch (error) {
    console.error('‚ùå Error en la conexi√≥n:', error);
    
    if (error.name === 'MongooseServerSelectionError') {
      console.log('\nüí° DIAGN√ìSTICO:');
      console.log('1. MongoDB no est√° ejecut√°ndose');
      console.log('2. URL de conexi√≥n incorrecta');
      console.log('3. Problemas de red/firewall');
      console.log('4. Credenciales incorrectas');
      
      console.log('\nüîß SOLUCIONES:');
      console.log('1. Verificar que MongoDB est√© ejecut√°ndose:');
      console.log('   sudo systemctl status mongod');
      console.log('   sudo systemctl start mongod');
      
      console.log('2. Verificar la URL en el archivo .env:');
      console.log('   MONGODB_URI=mongodb://localhost:27017/hoodfy');
      
      console.log('3. Verificar conectividad:');
      console.log('   telnet localhost 27017');
      
    } else if (error.name === 'MongooseTimeoutError') {
      console.log('\nüí° DIAGN√ìSTICO: Timeout de conexi√≥n');
      console.log('1. MongoDB est√° lento o sobrecargado');
      console.log('2. Problemas de red');
      console.log('3. Configuraci√≥n de timeout muy baja');
      
    } else {
      console.log('\nüí° DIAGN√ìSTICO: Error desconocido');
      console.log('Tipo de error:', error.name);
      console.log('Mensaje:', error.message);
    }
    
  } finally {
    try {
      await mongoose.connection.close();
      console.log('\nüîå Conexi√≥n a MongoDB cerrada');
    } catch (closeError) {
      console.log('\n‚ö†Ô∏è Error al cerrar la conexi√≥n:', closeError.message);
    }
  }
}

// Ejecutar la verificaci√≥n
checkMongoDB();
