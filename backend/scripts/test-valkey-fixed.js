const { getRedisManager } = require('../config/redis-cluster');
const CacheService = require('../services/cacheService');

async function testValkeyConnection() {
  console.log('üß™ INICIANDO PRUEBA DE CONEXI√ìN VALKEY CLUSTER CORREGIDA');
  console.log('=' .repeat(60));

  try {
    // 1. Probar Redis Manager
    console.log('\n1Ô∏è‚É£ Probando Redis Manager...');
    const redisManager = getRedisManager();
    console.log('‚úÖ Redis Manager obtenido');

    // 2. Conectar por primera vez
    console.log('\n2Ô∏è‚É£ Conectando por primera vez...');
    const redis1 = await redisManager.connect();
    console.log('‚úÖ Primera conexi√≥n exitosa');

    // 3. Intentar conectar de nuevo (deber√≠a reutilizar)
    console.log('\n3Ô∏è‚É£ Intentando conectar de nuevo (deber√≠a reutilizar)...');
    const redis2 = await redisManager.connect();
    console.log('‚úÖ Segunda conexi√≥n exitosa (reutilizada)');

    // 4. Verificar que es la misma instancia
    console.log('\n4Ô∏è‚É£ Verificando que es la misma instancia...');
    console.log('¬øMisma instancia?', redis1 === redis2 ? '‚úÖ S√ç' : '‚ùå NO');

    // 5. Probar operaciones b√°sicas
    console.log('\n5Ô∏è‚É£ Probando operaciones b√°sicas...');
    await redisManager.safeSet('test:connection', 'Valkey Cluster funcionando', 'EX', 30);
    const value = await redisManager.safeGet('test:connection');
    console.log('‚úÖ Valor almacenado y recuperado:', value);

    // 6. Probar Cache Service
    console.log('\n6Ô∏è‚É£ Probando Cache Service...');
    const cacheService = new CacheService();
    
    // Esperar un poco para que se inicialice
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await cacheService.set('test:cache', { message: 'Cache Service funcionando' }, 30);
    const cachedValue = await cacheService.get('test:cache');
    console.log('‚úÖ Cache Service funcionando:', cachedValue);

    // 7. Probar m√∫ltiples servicios simult√°neamente
    console.log('\n7Ô∏è‚É£ Probando m√∫ltiples servicios simult√°neamente...');
    const cacheService2 = new CacheService();
    await new Promise(resolve => setTimeout(resolve, 500));
    
    await cacheService2.set('test:cache2', { message: 'Segundo Cache Service' }, 30);
    const cachedValue2 = await cacheService2.get('test:cache2');
    console.log('‚úÖ Segundo Cache Service funcionando:', cachedValue2);

    // 8. Verificar estad√≠sticas
    console.log('\n8Ô∏è‚É£ Verificando estad√≠sticas...');
    const stats = redisManager.isHealthy();
    console.log('‚úÖ Redis saludable:', stats);

    // 9. Limpiar datos de prueba
    console.log('\n9Ô∏è‚É£ Limpiando datos de prueba...');
    await redisManager.safeDel('test:connection');
    await cacheService.del('test:cache');
    await cacheService2.del('test:cache2');
    console.log('‚úÖ Datos de prueba eliminados');

    console.log('\nüéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE');
    console.log('‚úÖ Valkey Cluster est√° funcionando correctamente');
    console.log('‚úÖ No hay m√∫ltiples conexiones');
    console.log('‚úÖ Cache Service funciona correctamente');
    console.log('‚úÖ Singleton pattern funciona');

  } catch (error) {
    console.error('\n‚ùå ERROR EN LAS PRUEBAS:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    // Limpiar conexiones
    try {
      const redisManager = getRedisManager();
      await redisManager.disconnect();
      console.log('\nüßπ Conexiones limpiadas');
    } catch (cleanupError) {
      console.error('‚ùå Error en limpieza:', cleanupError);
    }
    
    process.exit(0);
  }
}

// Ejecutar las pruebas
testValkeyConnection();
