const mongoose = require('mongoose');
const User = require('../models/User');
const Community = require('../models/Community');
const Subscription = require('../models/Subscription');
require('dotenv').config();

async function optimizeDatabaseIndexes() {
  try {
    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');

    console.log('\nüîß OPTIMIZANDO √çNDICES DE BASE DE DATOS\n');

    // 1. Optimizar √≠ndices de User
    console.log('1Ô∏è‚É£ Optimizando √≠ndices de User...');
    
    try {
      // √çndice para email (cr√≠tico para login)
      await User.collection.createIndex({ email: 1 }, { unique: true });
      console.log('‚úÖ √çndice creado: User.email');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice User.email ya existe o error:', error.message);
    }

    try {
      // √çndice para username (cr√≠tico para b√∫squedas)
      await User.collection.createIndex({ username: 1 }, { unique: true });
      console.log('‚úÖ √çndice creado: User.username');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice User.username ya existe o error:', error.message);
    }

    try {
      // √çndice para firebaseUid (cr√≠tico para autenticaci√≥n)
      await User.collection.createIndex({ firebaseUid: 1 }, { unique: true });
      console.log('‚úÖ √çndice creado: User.firebaseUid');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice User.firebaseUid ya existe o error:', error.message);
    }

    try {
      // √çndice compuesto para b√∫squedas de usuarios activos
      await User.collection.createIndex({ isActive: 1, createdAt: -1 });
      console.log('‚úÖ √çndice creado: User.isActive + createdAt');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice User.isActive ya existe o error:', error.message);
    }

    // 2. Optimizar √≠ndices de Community
    console.log('\n2Ô∏è‚É£ Optimizando √≠ndices de Community...');
    
    try {
      // √çndice para b√∫squedas por nombre
      await Community.collection.createIndex({ name: 1 });
      console.log('‚úÖ √çndice creado: Community.name');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Community.name ya existe o error:', error.message);
    }

    try {
      // √çndice para b√∫squedas por creador
      await Community.collection.createIndex({ creator: 1, createdAt: -1 });
      console.log('‚úÖ √çndice creado: Community.creator + createdAt');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Community.creator ya existe o error:', error.message);
    }

    try {
      // √çndice para b√∫squedas por miembros
      await Community.collection.createIndex({ members: 1 });
      console.log('‚úÖ √çndice creado: Community.members');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Community.members ya existe o error:', error.message);
    }

    // 3. Optimizar √≠ndices de Subscription
    console.log('\n3Ô∏è‚É£ Optimizando √≠ndices de Subscription...');
    
    try {
      // √çndice para b√∫squedas por usuario
      await Subscription.collection.createIndex({ user: 1, status: 1 });
      console.log('‚úÖ √çndice creado: Subscription.user + status');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Subscription.user ya existe o error:', error.message);
    }

    try {
      // √çndice para b√∫squedas por comunidad
      await Subscription.collection.createIndex({ community: 1, status: 1 });
      console.log('‚úÖ √çndice creado: Subscription.community + status');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Subscription.community ya existe o error:', error.message);
    }

    try {
      // √çndice para b√∫squedas por status
      await Subscription.collection.createIndex({ status: 1, createdAt: -1 });
      console.log('‚úÖ √çndice creado: Subscription.status + createdAt');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Subscription.status ya existe o error:', error.message);
    }

    try {
      // √çndice para Stripe Customer ID
      await Subscription.collection.createIndex({ stripeCustomerId: 1 });
      console.log('‚úÖ √çndice creado: Subscription.stripeCustomerId');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Subscription.stripeCustomerId ya existe o error:', error.message);
    }

    try {
      // √çndice para Stripe Subscription ID
      await Subscription.collection.createIndex({ stripeSubscriptionId: 1 });
      console.log('‚úÖ √çndice creado: Subscription.stripeSubscriptionId');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice Subscription.stripeSubscriptionId ya existe o error:', error.message);
    }

    // 4. Verificar √≠ndices finales
    console.log('\n4Ô∏è‚É£ Verificando √≠ndices finales...');
    
    const userIndexes = await User.collection.getIndexes();
    const communityIndexes = await Community.collection.getIndexes();
    const subscriptionIndexes = await Subscription.collection.getIndexes();

    console.log(`\nüìä Total de √≠ndices:`);
    console.log(`- User: ${Object.keys(userIndexes).length}`);
    console.log(`- Community: ${Object.keys(communityIndexes).length}`);
    console.log(`- Subscription: ${Object.keys(subscriptionIndexes).length}`);

    // 5. Test de rendimiento despu√©s de optimizaci√≥n
    console.log('\n5Ô∏è‚É£ Test de rendimiento optimizado...');
    
    const startTime = Date.now();
    const users = await User.find({ email: { $exists: true } }).limit(100);
    const userQueryTime = Date.now() - startTime;
    console.log(`- Consulta optimizada de usuarios: ${userQueryTime}ms`);

    const startTime2 = Date.now();
    const subscriptions = await Subscription.find({ status: 'active' }).populate('user community');
    const subscriptionQueryTime = Date.now() - startTime2;
    console.log(`- Consulta optimizada de suscripciones: ${subscriptionQueryTime}ms`);

    console.log('\n‚úÖ OPTIMIZACI√ìN COMPLETADA');
    console.log('='.repeat(50));
    console.log('üöÄ La base de datos est√° optimizada para escalar');
    console.log('üìà Rendimiento mejorado para consultas frecuentes');
    console.log('üîç B√∫squedas m√°s r√°pidas en usuarios y suscripciones');
    
  } catch (error) {
    console.error('‚ùå Error en optimizaci√≥n:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
  }
}

optimizeDatabaseIndexes();
